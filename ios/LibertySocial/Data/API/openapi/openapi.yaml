openapi: 3.1.0
info:
  title: LibertyServer API
  version: 1.0.0
  description: >
    Client-facing contract for LibertyServer. JWT-authenticated REST API used by iOS (Swift),
    future Android and Web clients. Schemas reflect the required/optional fields we've defined.
servers:
  - url: http://127.0.0.1:3000
    description: Local dev
  - url: https://api.dev.libertysocial.app
    description: Dev
  - url: https://api.staging.libertysocial.app
    description: Staging
  - url: https://api.libertysocial.app
    description: Prod
tags:
  - name: Auth
  - name: Users
  - name: Connections
  - name: Posts
  - name: Groups
security:
  - bearerAuth: []

paths:
  /signup:
    post:
      tags: [Auth]
      summary: Create a new user account
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/SignupRequest' }
            examples:
              default:
                value:
                  email: user@example.com
                  password: Password123!
                  username: reedturner
                  firstName: Reed
                  lastName: Turner
                  dateOfBirth: '1994-05-10'
                  gender: 0
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AuthResponse' }
        '400': { $ref: '#/components/responses/BadRequest' }

  /login:
    post:
      tags: [Auth]
      summary: Exchange credentials for a JWT access token
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/LoginRequest' }
      responses:
        '200':
          description: OK
          headers:
            Authorization:
              description: Bearer token may be returned in body only; use Authorization: Bearer <token> on requests.
              schema: { type: string }
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AuthResponse' }
        '401': { $ref: '#/components/responses/Unauthorized' }

  /user/me:
    get:
      tags: [Users]
      summary: Get current authenticated user
      security: [{ bearerAuth: [] }]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/User' }
        '401': { $ref: '#/components/responses/Unauthorized' }
    delete:
      tags: [Users]
      summary: Delete the authenticated user (dangerous)
      security: [{ bearerAuth: [] }]
      responses:
        '204': { description: Deleted }
        '401': { $ref: '#/components/responses/Unauthorized' }

  /users/{id}:
    get:
      tags: [Users]
      summary: Get a user profile by id (fields vary by relationship)
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/UserId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/User' }
        '404': { $ref: '#/components/responses/NotFound' }

  /connections:
    get:
      tags: [Connections]
      summary: List my connections by category
      security: [{ bearerAuth: [] }]
      parameters:
        - in: query
          name: type
          description: acquaintances|strangers|followers|following|all
          schema:
            type: string
            enum: [acquaintances, strangers, followers, following, all]
            default: all
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items: { $ref: '#/components/schemas/Connection' }
                  nextPage: { type: integer, nullable: true }

  /connections/requests/{id}/accept:
    post:
      tags: [Connections]
      summary: Accept a connection request
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          description: Connection request id
          schema: { type: string }
      responses:
        '200':
          description: Accepted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { type: string, enum: [accepted] }
        '404': { $ref: '#/components/responses/NotFound' }

  /posts:
    get:
      tags: [Posts]
      summary: Feed for the authenticated user
      security: [{ bearerAuth: [] }]
      parameters:
        - in: query
          name: groupId
          schema: { type: string, nullable: true }
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items: { $ref: '#/components/schemas/Post' }
                  nextPage: { type: integer, nullable: true }
    post:
      tags: [Posts]
      summary: Create a post
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/PostCreate' }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Post' }

  /groups:
    get:
      tags: [Groups]
      summary: List groups visible to me
      security: [{ bearerAuth: [] }]
      parameters:
        - in: query
          name: type
          schema:
            type: string
            enum: [public, private, personal]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Group' }
    post:
      tags: [Groups]
      summary: Create a group
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/GroupCreate' }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Group' }

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    UserId:
      in: path
      name: id
      required: true
      schema: { type: string }
    Page:
      in: query
      name: page
      schema: { type: integer, minimum: 1, default: 1 }
    Limit:
      in: query
      name: limit
      schema: { type: integer, minimum: 1, maximum: 100, default: 20 }

  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
    NotFound:
      description: Not Found
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }

  schemas:
    AuthResponse:
      type: object
      required: [token, user]
      properties:
        token:
          type: string
          description: JWT Bearer token; send as Authorization: Bearer <token>
        user: { $ref: '#/components/schemas/User' }

    SignupRequest:
      type: object
      required: [email, password, username, firstName, lastName, dateOfBirth, gender]
      properties:
        email: { type: string, format: email }
        password: { type: string, minLength: 8, maxLength: 24 }
        username: { type: string }
        firstName: { type: string }
        lastName: { type: string }
        phone: { type: string, nullable: true }
        gender:
          type: integer
          enum: [0, 1]
          description: '0 = male, 1 = female'
        dateOfBirth: { type: string, format: date }
        zipCode: { type: string, nullable: true }
        photoUrl: { type: string, format: uri, nullable: true }
        about: { type: string, maxLength: 500, nullable: true }

    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email: { type: string, format: email }
        password: { type: string }

    User:
      type: object
      required: [id, username, createdAt]
      properties:
        id: { type: string }
        email: { type: string, format: email, nullable: true }
        username: { type: string }
        firstName: { type: string, nullable: true }
        lastName: { type: string, nullable: true }
        phone: { type: string, nullable: true }
        gender:
          type: integer
          enum: [0, 1]
          nullable: true
        dateOfBirth: { type: string, format: date, nullable: true }
        zipCode: { type: string, nullable: true }
        photoUrl: { type: string, format: uri, nullable: true }
        about: { type: string, nullable: true }
        createdAt: { type: string, format: date-time }

    Connection:
      type: object
      properties:
        user: { $ref: '#/components/schemas/User' }
        relationship:
          type: string
          enum: [acquaintance, stranger, follower, following]

    Post:
      type: object
      required: [id, authorId, content, createdAt]
      properties:
        id: { type: string }
        authorId: { type: string }
        groupId: { type: string, nullable: true }
        content: { type: string }
        visibility:
          type: string
          enum: [public, connections, private, group]
          default: public
        createdAt: { type: string, format: date-time }

    PostCreate:
      type: object
      required: [content]
      properties:
        content: { type: string }
        groupId: { type: string, nullable: true }
        visibility:
          type: string
          enum: [public, connections, private, group]
          default: public

    Group:
      type: object
      required: [id, name, type, createdAt]
      properties:
        id: { type: string }
        name: { type: string }
        description: { type: string, nullable: true }
        type:
          type: string
          enum: [public, private, personal]
        createdAt: { type: string, format: date-time }

    GroupCreate:
      type: object
      required: [name, type]
      properties:
        name: { type: string }
        description: { type: string, nullable: true }
        type:
          type: string
          enum: [public, private, personal]

    Error:
      type: object
      required: [code, message]
      properties:
        code: { type: string }
        message: { type: string }
        details: { type: object, additionalProperties: true, nullable: true }
