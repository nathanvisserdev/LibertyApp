generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum RequestStatus {
  PENDING
  ACCEPTED
  DECLINED
  CANCELED
}

enum ConnectionType {
  ACQUAINTANCE
  STRANGER
  FOLLOW
}

enum GroupType {
  PUBLIC      // Assembly Rooms
  PRIVATE     // Sanctuaries
  PERSONAL    // Inner Circle (no room)
  ALL_USERS   // Public Square (one global)
}

model Users {
  id          String    @id @default(cuid())
  email       String    @unique
  password    String
  firstName   String?
  lastName    String?
  username    String?   @unique
  dateOfBirth DateTime?
  gender      Boolean?
  phoneNumber String?
  zipCode     String?
  photo       String?
  about       String?
  createdAt   DateTime  @default(now())

  // privacy & account state
  isPrivateUser Boolean  @default(true)
  isBanned      Boolean  @default(false) // platform ban toggle

  // content
  posts Posts[]

  // groups this user belongs to (roster entries)
  groups GroupRoster[]

  // requests
  outgoingRequests ConnectionRequest[] @relation("req_outgoing")
  incomingRequests ConnectionRequest[] @relation("req_incoming")

  // connections (finalized)
  following Connections[] @relation("conn_outgoing")
  followers Connections[] @relation("conn_incoming")

  // blocks (bilateral effect via two directed rows)
  blocksInitiated Blocks[] @relation("blocks_blocker")
  blocksReceived  Blocks[] @relation("blocks_blocked")

  // optional 1:1 creator profile
  creator Creator?

  // groups this user administers (back-relation to Groups.admin)
  adminGroups Groups[] @relation("GroupAdmin")
}

model Creator {
  userId                   String  @id
  user                     Users   @relation(fields: [userId], references: [id])
  acceptsAllFollowRequests Boolean @default(false)
}

model Groups {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())

  // visibility & admin
  groupType GroupType @default(PERSONAL)
  adminId   String
  admin     Users     @relation("GroupAdmin", fields: [adminId], references: [id])

  // content
  posts Posts[]

  // roster entries (who belongs to this group)
  members GroupRoster[]

  @@index([groupType])
  @@index([adminId])
}

model Posts {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  userId    String
  groupId   String?

  user  Users   @relation(fields: [userId], references: [id])
  group Groups? @relation(fields: [groupId], references: [id])
}

model GroupRoster {
  membershipId String   @id @default(cuid())
  userId       String
  groupId      String
  joinedAt     DateTime @default(now())

  user  Users  @relation(fields: [userId], references: [id])
  group Groups @relation(fields: [groupId], references: [id])

  @@unique([userId, groupId])
}

model ConnectionRequest {
  id          String         @id @default(cuid())
  requesterId String
  requestedId String
  type        ConnectionType
  status      RequestStatus  @default(PENDING)
  createdAt   DateTime       @default(now())
  decidedAt   DateTime?

  requester Users @relation("req_outgoing", fields: [requesterId], references: [id])
  requested Users @relation("req_incoming", fields: [requestedId], references: [id])

  @@index([requesterId, requestedId, type, status])
}

model Connections {
  id          String         @id @default(cuid())
  requesterId String // FOLLOW: followerId; others: min(userA,userB)
  requestedId String // FOLLOW: creatorId;  others: max(userA,userB)
  type        ConnectionType
  since       DateTime       @default(now())

  requester Users @relation("conn_outgoing", fields: [requesterId], references: [id])
  requested Users @relation("conn_incoming", fields: [requestedId], references: [id])

  @@unique([requesterId, requestedId, type])
}

// Directed block: (blockerId -> blockedId)
model Blocks {
  blockerId String
  blockedId String
  createdAt DateTime @default(now())

  blocker Users @relation("blocks_blocker", fields: [blockerId], references: [id], onDelete: Cascade)
  blocked Users @relation("blocks_blocked", fields: [blockedId], references: [id], onDelete: Cascade)

  @@id([blockerId, blockedId])
  @@index([blockedId])
}
