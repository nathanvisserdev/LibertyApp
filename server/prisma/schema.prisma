generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum RequestStatus {
  PENDING
  ACCEPTED
  DECLINED
  CANCELED
}

enum ConnectionType {
  ACQUAINTANCE
  STRANGER
  FOLLOW
}

enum GroupType {
  PUBLIC     // General Assembly
  PRIVATE    // Assembly Room
  PERSONAL   // Social Circle (owner = admin)
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

enum PostVisibility {
  PUBLIC        // shows in Public Square if not in PRIVATE/PERSONAL group
  CONNECTIONS   // authorâ€™s connections only
  GROUP         // governed by group membership
}

model Users {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  firstName     String?
  lastName      String?
  username      String?   @unique
  dateOfBirth   DateTime?
  gender        Gender?
  phoneNumber   String?
  zipCode       String?
  photo         String?
  about         String?
  createdAt     DateTime  @default(now())

  // privacy & account state
  isPrivateUser Boolean   @default(true)
  isPaid        Boolean   @default(false)
  isBanned      Boolean   @default(false)

  // content
  posts         Posts[]

  // group membership
  groups        GroupRoster[]

  // requests
  outgoingRequests ConnectionRequest[] @relation("req_outgoing")
  incomingRequests ConnectionRequest[] @relation("req_incoming")

  // connections (finalized)
  following Connections[] @relation("conn_outgoing")
  followers Connections[] @relation("conn_incoming")

  // blocks
  blocksInitiated Blocks[] @relation("blocks_blocker")
  blocksReceived  Blocks[] @relation("blocks_blocked")

  // groups this user administers
  adminGroups Groups[] @relation("GroupAdmin")

  @@index([isPaid])
}

model Groups {
  id          String    @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime  @default(now())

  // visibility & admin
  groupType GroupType @default(PRIVATE)
  isHidden  Boolean   @default(false)
  adminId   String
  admin     Users     @relation("GroupAdmin", fields: [adminId], references: [id])

  // content
  posts Posts[]

  // roster
  members GroupRoster[]

  @@index([groupType])
  @@index([adminId])
  @@unique([adminId, name])
}

model Posts {
  id          String         @id @default(cuid())
  content     String
  createdAt   DateTime       @default(now())
  userId      String
  groupId     String?
  visibility  PostVisibility @default(PUBLIC)

  user  Users   @relation(fields: [userId], references: [id])
  group Groups? @relation(fields: [groupId], references: [id])

  @@index([createdAt])
  @@index([visibility])
  @@index([groupId])
}

model GroupRoster {
  membershipId String   @id @default(cuid())
  userId       String
  groupId      String
  joinedAt     DateTime @default(now())

  user  Users  @relation(fields: [userId], references: [id])
  group Groups @relation(fields: [groupId], references: [id])

  @@unique([userId, groupId])
}

model ConnectionRequest {
  id          String         @id @default(cuid())
  requesterId String
  requestedId String
  type        ConnectionType
  status      RequestStatus  @default(PENDING)
  createdAt   DateTime       @default(now())
  decidedAt   DateTime?

  requester Users @relation("req_outgoing", fields: [requesterId], references: [id])
  requested Users @relation("req_incoming", fields: [requestedId], references: [id])

  @@index([requesterId, requestedId, type, status])
}

model Connections {
  id          String         @id @default(cuid())
  requesterId String // FOLLOW: followerId; others: min(userA,userB)
  requestedId String // FOLLOW: userId;  others: max(userA,userB)
  type        ConnectionType
  since       DateTime       @default(now())

  requester Users @relation("conn_outgoing", fields: [requesterId], references: [id])
  requested Users @relation("conn_incoming", fields: [requestedId], references: [id])

  @@unique([requesterId, requestedId, type])
}

// Directed block: (blockerId -> blockedId)
model Blocks {
  blockerId String
  blockedId String
  createdAt DateTime @default(now())

  blocker Users @relation("blocks_blocker", fields: [blockerId], references: [id], onDelete: Cascade)
  blocked Users @relation("blocks_blocked", fields: [blockedId], references: [id], onDelete: Cascade)

  @@id([blockerId, blockedId])
  @@index([blockedId])
}
